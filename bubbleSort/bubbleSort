.data
nums: .word 10
elems: .word 64, 34, 25, 12, 22, 11, 90, 76, 54, 62
result: .asciiz "result = "
blank: .asciiz " "
.text 
	la $s0, nums	#load address of nums
	lw $s1, 0($s0)	#load value of nums to $s1
	la $s0, elems	#load address of elems
	addi $t0, $s1, -1	#set i = nums - 1
loop1: 	beq $t0, $0, exit1	#if $t0 == 0 then exit
	add $t1, $0, $0		#set j = 0
	add $t2, $0, $s0	#set $t2 = address of elems
	add $t6, $0, $0		#set $t6 = 0
loop2:  beq $t1, $t0, exit2	#if j == i then i++ and jump to loop1
	lw $t3, 0($t2)		#load value of arr[j]
	lw $t4, 4($t2)		#load value of arr[j+1]
	slt $t5, $t3, $t4	#if arr[j] < arr[j+1] then swap, else jump
	beq $t5, $0, else	# swap
	addi $t6, $0, 1		#set $t6 = 1
	sw $t4, 0($t2)
	sw $t3, 4($t2)
else:	addi $t2, $t2, 4	#increase address by 4
	addi $t1, $t1, 1	#increase j by 1
	j loop2			#jump to loop2
exit2: 	addi $t0, $t0, -1	#decrease i by 1
	beq $t6, $0, exit1	#if $t6 == 0 then the arrayis already in order, exit algorithms
	j loop1			#jump to loop1
	
exit1:		# -------------- PRINT RESULT -------------
	li $v0, 4
	la $a0, result
	syscall
	add $t0, $0, $0

loop3: 	beq $t0, $s1, exit3
	addi $t0, $t0, 1
	
	lw, $a0, 0($s0)
	li, $v0, 1
	syscall

	li $v0, 4
	la $a0, blank
	syscall
	
	addi $s0, $s0, 4
	j loop3
exit3:
	add $t0, $0, $0